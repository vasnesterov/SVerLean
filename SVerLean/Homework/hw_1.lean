variable {α β γ : Type}

/- # Задача 1. Термы

Замените `sorry` ниже на термы нужного типа.
-/

def B : (α → β) → (γ → α) → γ → β :=
  sorry

def S : (α → β → γ) → (α → β) → α → γ :=
  sorry

def moreNonsense : (γ → (α → β) → α) → γ → β → α :=
  sorry

def evenMoreNonsense : (α → α → β) → (β → γ) → α → β → γ :=
  sorry

/-- Бонусный пункт. -/
def weakPeirce : ((((α → β) → α) → α) → β) → β :=
  sorry

/- # Задача 2. List.foldl

Часто возникает ситуация когда мы хотим пройтись по листу слева направа, накопив какую-то
информацию (посчитать минимум, найти сумму, собрать все элементы в хэшсет...). В функциональных
языках для этого служит операция под названием "fold". Для листа есть две функции:
`List.foldl` и `List.foldr` которые делают fold но проходят лист в разных направлениях:
`foldl` слева-направо, `foldr` наоборот.
-/

def List.mySum (li : List Nat) : Nat :=
  li.foldl (fun acc new => acc + new) 0 -- acc от слова accumulated, промежуточное накопленное значение
                                        -- в данном случае сумма
                                        -- new - элемент листа на котором сейчас остановились
                                        -- аргумент `init` равен `0` - сумму в пустом листе считаем нулевой

#eval List.mySum [1, 2, 3, 4, 5]

/-- Реализуйте функцию которая находит значения двух наименьших элементов списка - то есть тех,
которые окажутся на первом и втором месте если мы остортируем лист по неубыванию. Используйте `foldl`.
Какой тип должен быть у этой функции? -/
def List.twoMins : sorry :=
  sorry

/-- Реализуйте операцию разворота листа при помощи `foldl`. -/
def List.myReverse {α : Type} (li : List α) : List α :=
  sorry

-- #eval List.myReverse [1, 2, 3, 4] -- expected: [4, 3, 2, 1]


/- # Задача 3. Квадратный корень

Реализуйте функцию `Nat.exactSqrt` которая проверяет что натуральное число является точным
квадратом и, если это так, возвращает его квадратный корень.
Скорость работы функции значения не имеет.
Разрешается использовать только арифметические операции и рекурсию.

Подсказка: вам пригодится вспомогательная функция.
-/

def Nat.exactSqrt (n : Nat) : Option Nat :=
  sorry
